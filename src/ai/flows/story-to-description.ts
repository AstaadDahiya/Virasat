'use server';

/**
 * @fileOverview AI-powered product description generation from audio stories.
 *
 * - storyToDescription - A function that transcribes an audio story and generates a compelling product description.
 * - StoryToDescriptionInput - The input type for the storyToDescription function.
 * - StoryToDescriptionOutput - The return type for the storyToDescription function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';
import wav from 'wav';

const StoryToDescriptionInputSchema = z.object({
  audioStory: z
    .string()
    .describe("A recording of the artisan's story about the product, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
  style: z
    .string()
    .optional()
    .describe('Desired style or tone of the description (e.g., elegant, rustic, modern).'),
});
export type StoryToDescriptionInput = z.infer<typeof StoryToDescriptionInputSchema>;

const StoryToDescriptionOutputSchema = z.object({
  transcript: z.string().describe('The transcription of the audio story.'),
  description: z
    .string()
    .describe('A compelling product description generated by the AI from the story.'),
});
export type StoryToDescriptionOutput = z.infer<typeof StoryToDescriptionOutputSchema>;


const storyTellerPrompt = ai.definePrompt({
    name: 'storyTellerPrompt',
    input: {
        schema: z.object({
            transcript: z.string(),
            style: z.string().optional(),
        })
    },
    output: { schema: z.object({ description: StoryToDescriptionOutputSchema.shape.description }) },
    prompt: `You are a marketing expert specializing in crafting product descriptions for artisanal goods. 
    You will be given a transcript of an artisan talking about their product. 
    Use the transcript to create a compelling and engaging product description that will attract customers.

    Transcript: {{{transcript}}}
    
    Style/Tone (if provided): {{{style}}}
    
    Description:`,
});


export async function storyToDescription(
  input: StoryToDescriptionInput
): Promise<StoryToDescriptionOutput> {
  return storyToDescriptionFlow(input);
}

const storyToDescriptionFlow = ai.defineFlow(
  {
    name: 'storyToDescriptionFlow',
    inputSchema: StoryToDescriptionInputSchema,
    outputSchema: StoryToDescriptionOutputSchema,
  },
  async (input) => {
    // 1. Transcribe the audio
    const {text: transcript} = await ai.generate({
        model: googleAI.model('gemini-2.0-flash'),
        prompt: [{media: {url: input.audioStory}}, {text: "Transcribe this audio."}],
    });
    
    if (!transcript) {
        throw new Error("Failed to transcribe audio.");
    }

    // 2. Generate description from transcript
    const {output} = await storyTellerPrompt({
        transcript: transcript,
        style: input.style
    });

    return {
        transcript: transcript,
        description: output!.description,
    };
  }
);
